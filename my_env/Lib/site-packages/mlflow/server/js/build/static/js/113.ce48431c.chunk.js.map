{"version":3,"file":"static/js/113.ce48431c.chunk.js","mappings":"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NA,GACM,OAANA,EAMR,SAASG,GAAiBH,GACtB,OAASA,GAAK,IAAUA,GAAK,IACnB,KAANA,GACCA,GAAK,IAAUA,GAAK,IACf,KAANA,GACM,KAANA,GACM,KAANA,GACM,KAANA,GACM,KAANA,GACM,KAANA,GACCA,GAAK,IAAUA,GAAK,IACpBA,GAAK,IAAUA,GAAK,IACpBA,GAAK,IAAUA,GAAK,IACpBA,GAAK,IAAUA,GAAK,IACf,KAANA,GACM,KAANA,GACM,KAANA,GACM,KAANA,GACM,KAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACCA,GAAK,KAAUA,GAAK,KACf,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,KACf,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,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","sources":["../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/error.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/types.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-skeleton-parser/lib/number.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/index.js","../node_modules/@formatjs/cli/src/pseudo_locale.js"],"sourcesContent":["export var ErrorKind;\n(function (ErrorKind) {\n    /** Argument is unclosed (e.g. `{0`) */\n    ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n    /** Argument is empty (e.g. `{}`). */\n    ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n    /** Argument is malformed (e.g. `{foo!}``) */\n    ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n    /** Expect an argument type (e.g. `{foo,}`) */\n    ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n    /** Unsupported argument type (e.g. `{foo,foo}`) */\n    ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n    /** Expect an argument style (e.g. `{foo, number, }`) */\n    ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n    /** The number skeleton is invalid. */\n    ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n    /** The date time skeleton is invalid. */\n    ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n    ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n    ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */\n    ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n    /** Missing select argument options (e.g. `{foo, select}`) */\n    ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n    ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n    ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n    ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n    ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n    ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n    /**\n     * Expecting a message fragment after the `plural` or `selectordinal` selector\n     * (e.g. `{foo, plural, one}`)\n     */\n    ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n    ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n    /**\n     * Duplicate selectors in `plural` or `selectordinal` argument.\n     * (e.g. {foo, plural, one {#} one {#}})\n     */\n    ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n    /** Duplicate selectors in `select` argument.\n     * (e.g. {foo, select, apple {apple} apple {apple}})\n     */\n    ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n    /** Plural or select argument option must have `other` clause. */\n    ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n    ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n    /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n    ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n    ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n    ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));\n","export var TYPE;\n(function (TYPE) {\n    /**\n     * Raw text\n     */\n    TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n    /**\n     * Variable w/o any format, e.g `var` in `this is a {var}`\n     */\n    TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n    /**\n     * Variable w/ number format\n     */\n    TYPE[TYPE[\"number\"] = 2] = \"number\";\n    /**\n     * Variable w/ date format\n     */\n    TYPE[TYPE[\"date\"] = 3] = \"date\";\n    /**\n     * Variable w/ time format\n     */\n    TYPE[TYPE[\"time\"] = 4] = \"time\";\n    /**\n     * Variable w/ select format\n     */\n    TYPE[TYPE[\"select\"] = 5] = \"select\";\n    /**\n     * Variable w/ plural format\n     */\n    TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n    /**\n     * Only possible within plural argument.\n     * This is the `#` symbol that will be substituted with the count.\n     */\n    TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n    /**\n     * XML-like tag\n     */\n    TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nexport var SKELETON_TYPE;\n(function (SKELETON_TYPE) {\n    SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n    SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\nexport function isLiteralElement(el) {\n    return el.type === TYPE.literal;\n}\nexport function isArgumentElement(el) {\n    return el.type === TYPE.argument;\n}\nexport function isNumberElement(el) {\n    return el.type === TYPE.number;\n}\nexport function isDateElement(el) {\n    return el.type === TYPE.date;\n}\nexport function isTimeElement(el) {\n    return el.type === TYPE.time;\n}\nexport function isSelectElement(el) {\n    return el.type === TYPE.select;\n}\nexport function isPluralElement(el) {\n    return el.type === TYPE.plural;\n}\nexport function isPoundElement(el) {\n    return el.type === TYPE.pound;\n}\nexport function isTagElement(el) {\n    return el.type === TYPE.tag;\n}\nexport function isNumberSkeleton(el) {\n    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);\n}\nexport function isDateTimeSkeleton(el) {\n    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);\n}\nexport function createLiteralElement(value) {\n    return {\n        type: TYPE.literal,\n        value: value,\n    };\n}\nexport function createNumberElement(value, style) {\n    return {\n        type: TYPE.number,\n        value: value,\n        style: style,\n    };\n}\n","// @generated from regex-gen.ts\nexport var SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nexport var WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;\n","/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nexport function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n        var len = match.length;\n        switch (match[0]) {\n            // Era\n            case 'G':\n                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n                break;\n            // Year\n            case 'y':\n                result.year = len === 2 ? '2-digit' : 'numeric';\n                break;\n            case 'Y':\n            case 'u':\n            case 'U':\n            case 'r':\n                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n            // Quarter\n            case 'q':\n            case 'Q':\n                throw new RangeError('`q/Q` (quarter) patterns are not supported');\n            // Month\n            case 'M':\n            case 'L':\n                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n                break;\n            // Week\n            case 'w':\n            case 'W':\n                throw new RangeError('`w/W` (week) patterns are not supported');\n            case 'd':\n                result.day = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'D':\n            case 'F':\n            case 'g':\n                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n            // Weekday\n            case 'E':\n                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n                break;\n            case 'e':\n                if (len < 4) {\n                    throw new RangeError('`e..eee` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            case 'c':\n                if (len < 4) {\n                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            // Period\n            case 'a': // AM, PM\n                result.hour12 = true;\n                break;\n            case 'b': // am, pm, noon, midnight\n            case 'B': // flexible day periods\n                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n            // Hour\n            case 'h':\n                result.hourCycle = 'h12';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'H':\n                result.hourCycle = 'h23';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'K':\n                result.hourCycle = 'h11';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'k':\n                result.hourCycle = 'h24';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'j':\n            case 'J':\n            case 'C':\n                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n            // Minute\n            case 'm':\n                result.minute = ['numeric', '2-digit'][len - 1];\n                break;\n            // Second\n            case 's':\n                result.second = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'S':\n            case 'A':\n                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n            // Zone\n            case 'z': // 1..3, 4: specific non-location format\n                result.timeZoneName = len < 4 ? 'short' : 'long';\n                break;\n            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n            case 'O': // 1, 4: miliseconds in day short, long\n            case 'v': // 1, 4: generic non-location format\n            case 'V': // 1, 2, 3, 4: time zone ID or city\n            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n                throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n        }\n        return '';\n    });\n    return result;\n}\n","// @generated from regex-gen.ts\nexport var WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;\n","import { __assign } from \"tslib\";\nimport { WHITE_SPACE_REGEX } from './regex.generated';\nexport function parseNumberSkeletonFromString(skeleton) {\n    if (skeleton.length === 0) {\n        throw new Error('Number skeleton cannot be empty');\n    }\n    // Parse the skeleton\n    var stringTokens = skeleton\n        .split(WHITE_SPACE_REGEX)\n        .filter(function (x) { return x.length > 0; });\n    var tokens = [];\n    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n        var stringToken = stringTokens_1[_i];\n        var stemAndOptions = stringToken.split('/');\n        if (stemAndOptions.length === 0) {\n            throw new Error('Invalid number skeleton');\n        }\n        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);\n        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n            var option = options_1[_a];\n            if (option.length === 0) {\n                throw new Error('Invalid number skeleton');\n            }\n        }\n        tokens.push({ stem: stem, options: options });\n    }\n    return tokens;\n}\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    if (str[str.length - 1] === 'r') {\n        result.roundingPriority = 'morePrecision';\n    }\n    else if (str[str.length - 1] === 's') {\n        result.roundingPriority = 'lessPrecision';\n    }\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== 'string') {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        }\n        // @@@+ case\n        else if (g2 === '+') {\n            result.minimumSignificantDigits = g1.length;\n        }\n        // .### case\n        else if (g1[0] === '#') {\n            result.maximumSignificantDigits = g1.length;\n        }\n        // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits =\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n        return '';\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch (str) {\n        case 'sign-auto':\n            return {\n                signDisplay: 'auto',\n            };\n        case 'sign-accounting':\n        case '()':\n            return {\n                currencySign: 'accounting',\n            };\n        case 'sign-always':\n        case '+!':\n            return {\n                signDisplay: 'always',\n            };\n        case 'sign-accounting-always':\n        case '()!':\n            return {\n                signDisplay: 'always',\n                currencySign: 'accounting',\n            };\n        case 'sign-except-zero':\n        case '+?':\n            return {\n                signDisplay: 'exceptZero',\n            };\n        case 'sign-accounting-except-zero':\n        case '()?':\n            return {\n                signDisplay: 'exceptZero',\n                currencySign: 'accounting',\n            };\n        case 'sign-never':\n        case '+_':\n            return {\n                signDisplay: 'never',\n            };\n    }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n    // Engineering\n    var result;\n    if (stem[0] === 'E' && stem[1] === 'E') {\n        result = {\n            notation: 'engineering',\n        };\n        stem = stem.slice(2);\n    }\n    else if (stem[0] === 'E') {\n        result = {\n            notation: 'scientific',\n        };\n        stem = stem.slice(1);\n    }\n    if (result) {\n        var signDisplay = stem.slice(0, 2);\n        if (signDisplay === '+!') {\n            result.signDisplay = 'always';\n            stem = stem.slice(2);\n        }\n        else if (signDisplay === '+?') {\n            result.signDisplay = 'exceptZero';\n            stem = stem.slice(2);\n        }\n        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n            throw new Error('Malformed concise eng/scientific notation');\n        }\n        result.minimumIntegerDigits = stem.length;\n    }\n    return result;\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nexport function parseNumberSkeleton(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        switch (token.stem) {\n            case 'percent':\n            case '%':\n                result.style = 'percent';\n                continue;\n            case '%x100':\n                result.style = 'percent';\n                result.scale = 100;\n                continue;\n            case 'currency':\n                result.style = 'currency';\n                result.currency = token.options[0];\n                continue;\n            case 'group-off':\n            case ',_':\n                result.useGrouping = false;\n                continue;\n            case 'precision-integer':\n            case '.':\n                result.maximumFractionDigits = 0;\n                continue;\n            case 'measure-unit':\n            case 'unit':\n                result.style = 'unit';\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case 'compact-short':\n            case 'K':\n                result.notation = 'compact';\n                result.compactDisplay = 'short';\n                continue;\n            case 'compact-long':\n            case 'KK':\n                result.notation = 'compact';\n                result.compactDisplay = 'long';\n                continue;\n            case 'scientific':\n                result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'engineering':\n                result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'notation-simple':\n                result.notation = 'standard';\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case 'unit-width-narrow':\n                result.currencyDisplay = 'narrowSymbol';\n                result.unitDisplay = 'narrow';\n                continue;\n            case 'unit-width-short':\n                result.currencyDisplay = 'code';\n                result.unitDisplay = 'short';\n                continue;\n            case 'unit-width-full-name':\n                result.currencyDisplay = 'name';\n                result.unitDisplay = 'long';\n                continue;\n            case 'unit-width-iso-code':\n                result.currencyDisplay = 'symbol';\n                continue;\n            case 'scale':\n                result.scale = parseFloat(token.options[0]);\n                continue;\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n            case 'integer-width':\n                if (token.options.length > 1) {\n                    throw new RangeError('integer-width stems only accept a single optional option');\n                }\n                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n                    if (g1) {\n                        result.minimumIntegerDigits = g2.length;\n                    }\n                    else if (g3 && g4) {\n                        throw new Error('We currently do not support maximum integer digits');\n                    }\n                    else if (g5) {\n                        throw new Error('We currently do not support exact integer digits');\n                    }\n                    return '';\n                });\n                continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n            result.minimumIntegerDigits = token.stem.length;\n            continue;\n        }\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            // Precision\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n            // precision-integer case\n            if (token.options.length > 1) {\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === '*') {\n                    result.minimumFractionDigits = g1.length;\n                }\n                // .### case\n                else if (g3 && g3[0] === '#') {\n                    result.maximumFractionDigits = g3.length;\n                }\n                // .00## case\n                else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                }\n                else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return '';\n            });\n            var opt = token.options[0];\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n            if (opt === 'w') {\n                result = __assign(__assign({}, result), { trailingZeroDisplay: 'stripIfInteger' });\n            }\n            else if (opt) {\n                result = __assign(__assign({}, result), parseSignificantPrecision(opt));\n            }\n            continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = __assign(__assign({}, result), signOpts);\n        }\n        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n        if (conciseScientificAndEngineeringOpts) {\n            result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);\n        }\n    }\n    return result;\n}\n","var _a;\nimport { __assign } from \"tslib\";\nimport { ErrorKind } from './error';\nimport { SKELETON_TYPE, TYPE, } from './types';\nimport { SPACE_SEPARATOR_REGEX } from './regex.generated';\nimport { parseNumberSkeleton, parseNumberSkeletonFromString, parseDateTimeSkeleton, } from '@formatjs/icu-skeleton-parser';\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\".concat(SPACE_SEPARATOR_REGEX.source, \"*\"));\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(\"\".concat(SPACE_SEPARATOR_REGEX.source, \"*$\"));\nfunction createLocation(start, end) {\n    return { start: start, end: end };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith;\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger\n    ? Number.isSafeInteger\n    : function (n) {\n        return (typeof n === 'number' &&\n            isFinite(n) &&\n            Math.floor(n) === n &&\n            Math.abs(n) <= 0x1fffffffffffff);\n    };\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n    var re = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n    /**\n     * legacy Edge or Xbox One browser\n     * Unicode flag support: supported\n     * Pattern_Syntax support: not supported\n     * See https://github.com/formatjs/formatjs/issues/2822\n     */\n    REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';\n}\ncatch (_) {\n    REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith\n    ? // Native\n        function startsWith(s, search, position) {\n            return s.startsWith(search, position);\n        }\n    : // For IE11\n        function startsWith(s, search, position) {\n            return s.slice(position, position + search.length) === search;\n        };\nvar fromCodePoint = hasNativeFromCodePoint\n    ? String.fromCodePoint\n    : // IE11\n        function fromCodePoint() {\n            var codePoints = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                codePoints[_i] = arguments[_i];\n            }\n            var elements = '';\n            var length = codePoints.length;\n            var i = 0;\n            var code;\n            while (length > i) {\n                code = codePoints[i++];\n                if (code > 0x10ffff)\n                    throw RangeError(code + ' is not a valid code point');\n                elements +=\n                    code < 0x10000\n                        ? String.fromCharCode(code)\n                        : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, (code % 0x400) + 0xdc00);\n            }\n            return elements;\n        };\nvar fromEntries = \n// native\nhasNativeFromEntries\n    ? Object.fromEntries\n    : // Ponyfill\n        function fromEntries(entries) {\n            var obj = {};\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                obj[k] = v;\n            }\n            return obj;\n        };\nvar codePointAt = hasNativeCodePointAt\n    ? // Native\n        function codePointAt(s, index) {\n            return s.codePointAt(index);\n        }\n    : // IE 11\n        function codePointAt(s, index) {\n            var size = s.length;\n            if (index < 0 || index >= size) {\n                return undefined;\n            }\n            var first = s.charCodeAt(index);\n            var second;\n            return first < 0xd800 ||\n                first > 0xdbff ||\n                index + 1 === size ||\n                (second = s.charCodeAt(index + 1)) < 0xdc00 ||\n                second > 0xdfff\n                ? first\n                : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;\n        };\nvar trimStart = hasTrimStart\n    ? // Native\n        function trimStart(s) {\n            return s.trimStart();\n        }\n    : // Ponyfill\n        function trimStart(s) {\n            return s.replace(SPACE_SEPARATOR_START_REGEX, '');\n        };\nvar trimEnd = hasTrimEnd\n    ? // Native\n        function trimEnd(s) {\n            return s.trimEnd();\n        }\n    : // Ponyfill\n        function trimEnd(s) {\n            return s.replace(SPACE_SEPARATOR_END_REGEX, '');\n        };\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n    return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n    // Native\n    var IDENTIFIER_PREFIX_RE_1 = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var _a;\n        IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n        var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n        return (_a = match[1]) !== null && _a !== void 0 ? _a : '';\n    };\n}\nelse {\n    // IE11\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var match = [];\n        while (true) {\n            var c = codePointAt(s, index);\n            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n                break;\n            }\n            match.push(c);\n            index += c >= 0x10000 ? 2 : 1;\n        }\n        return fromCodePoint.apply(void 0, match);\n    };\n}\nvar Parser = /** @class */ (function () {\n    function Parser(message, options) {\n        if (options === void 0) { options = {}; }\n        this.message = message;\n        this.position = { offset: 0, line: 1, column: 1 };\n        this.ignoreTag = !!options.ignoreTag;\n        this.requiresOtherClause = !!options.requiresOtherClause;\n        this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n    }\n    Parser.prototype.parse = function () {\n        if (this.offset() !== 0) {\n            throw Error('parser can only be used once');\n        }\n        return this.parseMessage(0, '', false);\n    };\n    Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {\n        var elements = [];\n        while (!this.isEOF()) {\n            var char = this.char();\n            if (char === 123 /* `{` */) {\n                var result = this.parseArgument(nestingLevel, expectingCloseTag);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n            else if (char === 125 /* `}` */ && nestingLevel > 0) {\n                break;\n            }\n            else if (char === 35 /* `#` */ &&\n                (parentArgType === 'plural' || parentArgType === 'selectordinal')) {\n                var position = this.clonePosition();\n                this.bump();\n                elements.push({\n                    type: TYPE.pound,\n                    location: createLocation(position, this.clonePosition()),\n                });\n            }\n            else if (char === 60 /* `<` */ &&\n                !this.ignoreTag &&\n                this.peek() === 47 // char code for '/'\n            ) {\n                if (expectingCloseTag) {\n                    break;\n                }\n                else {\n                    return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n                }\n            }\n            else if (char === 60 /* `<` */ &&\n                !this.ignoreTag &&\n                _isAlpha(this.peek() || 0)) {\n                var result = this.parseTag(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n            else {\n                var result = this.parseLiteral(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n        }\n        return { val: elements, err: null };\n    };\n    /**\n     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n     * are accepted:\n     *\n     * ```\n     * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n     * tagName ::= [a-z] (PENChar)*\n     * PENChar ::=\n     *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n     * ```\n     *\n     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n     * since other tag-based engines like React allow it\n     */\n    Parser.prototype.parseTag = function (nestingLevel, parentArgType) {\n        var startPosition = this.clonePosition();\n        this.bump(); // `<`\n        var tagName = this.parseTagName();\n        this.bumpSpace();\n        if (this.bumpIf('/>')) {\n            // Self closing tag\n            return {\n                val: {\n                    type: TYPE.literal,\n                    value: \"<\".concat(tagName, \"/>\"),\n                    location: createLocation(startPosition, this.clonePosition()),\n                },\n                err: null,\n            };\n        }\n        else if (this.bumpIf('>')) {\n            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n            if (childrenResult.err) {\n                return childrenResult;\n            }\n            var children = childrenResult.val;\n            // Expecting a close tag\n            var endTagStartPosition = this.clonePosition();\n            if (this.bumpIf('</')) {\n                if (this.isEOF() || !_isAlpha(this.char())) {\n                    return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                var closingTagNameStartPosition = this.clonePosition();\n                var closingTagName = this.parseTagName();\n                if (tagName !== closingTagName) {\n                    return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n                }\n                this.bumpSpace();\n                if (!this.bumpIf('>')) {\n                    return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                return {\n                    val: {\n                        type: TYPE.tag,\n                        value: tagName,\n                        children: children,\n                        location: createLocation(startPosition, this.clonePosition()),\n                    },\n                    err: null,\n                };\n            }\n            else {\n                return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n            }\n        }\n        else {\n            return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n        }\n    };\n    /**\n     * This method assumes that the caller has peeked ahead for the first tag character.\n     */\n    Parser.prototype.parseTagName = function () {\n        var startOffset = this.offset();\n        this.bump(); // the first tag name character\n        while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {\n            this.bump();\n        }\n        return this.message.slice(startOffset, this.offset());\n    };\n    Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {\n        var start = this.clonePosition();\n        var value = '';\n        while (true) {\n            var parseQuoteResult = this.tryParseQuote(parentArgType);\n            if (parseQuoteResult) {\n                value += parseQuoteResult;\n                continue;\n            }\n            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n            if (parseUnquotedResult) {\n                value += parseUnquotedResult;\n                continue;\n            }\n            var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n            if (parseLeftAngleResult) {\n                value += parseLeftAngleResult;\n                continue;\n            }\n            break;\n        }\n        var location = createLocation(start, this.clonePosition());\n        return {\n            val: { type: TYPE.literal, value: value, location: location },\n            err: null,\n        };\n    };\n    Parser.prototype.tryParseLeftAngleBracket = function () {\n        if (!this.isEOF() &&\n            this.char() === 60 /* `<` */ &&\n            (this.ignoreTag ||\n                // If at the opening tag or closing tag position, bail.\n                !_isAlphaOrSlash(this.peek() || 0))) {\n            this.bump(); // `<`\n            return '<';\n        }\n        return null;\n    };\n    /**\n     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n     * a character that requires quoting (that is, \"only where needed\"), and works the same in\n     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n     */\n    Parser.prototype.tryParseQuote = function (parentArgType) {\n        if (this.isEOF() || this.char() !== 39 /* `'` */) {\n            return null;\n        }\n        // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n        // Check if is valid escaped character\n        switch (this.peek()) {\n            case 39 /* `'` */:\n                // double quote, should return as a single quote.\n                this.bump();\n                this.bump();\n                return \"'\";\n            // '{', '<', '>', '}'\n            case 123:\n            case 60:\n            case 62:\n            case 125:\n                break;\n            case 35: // '#'\n                if (parentArgType === 'plural' || parentArgType === 'selectordinal') {\n                    break;\n                }\n                return null;\n            default:\n                return null;\n        }\n        this.bump(); // apostrophe\n        var codePoints = [this.char()]; // escaped char\n        this.bump();\n        // read chars until the optional closing apostrophe is found\n        while (!this.isEOF()) {\n            var ch = this.char();\n            if (ch === 39 /* `'` */) {\n                if (this.peek() === 39 /* `'` */) {\n                    codePoints.push(39);\n                    // Bump one more time because we need to skip 2 characters.\n                    this.bump();\n                }\n                else {\n                    // Optional closing apostrophe.\n                    this.bump();\n                    break;\n                }\n            }\n            else {\n                codePoints.push(ch);\n            }\n            this.bump();\n        }\n        return fromCodePoint.apply(void 0, codePoints);\n    };\n    Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {\n        if (this.isEOF()) {\n            return null;\n        }\n        var ch = this.char();\n        if (ch === 60 /* `<` */ ||\n            ch === 123 /* `{` */ ||\n            (ch === 35 /* `#` */ &&\n                (parentArgType === 'plural' || parentArgType === 'selectordinal')) ||\n            (ch === 125 /* `}` */ && nestingLevel > 0)) {\n            return null;\n        }\n        else {\n            this.bump();\n            return fromCodePoint(ch);\n        }\n    };\n    Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {\n        var openingBracePosition = this.clonePosition();\n        this.bump(); // `{`\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        if (this.char() === 125 /* `}` */) {\n            this.bump();\n            return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        // argument name\n        var value = this.parseIdentifierIfPossible().value;\n        if (!value) {\n            return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        switch (this.char()) {\n            // Simple argument: `{name}`\n            case 125 /* `}` */: {\n                this.bump(); // `}`\n                return {\n                    val: {\n                        type: TYPE.argument,\n                        // value does not include the opening and closing braces.\n                        value: value,\n                        location: createLocation(openingBracePosition, this.clonePosition()),\n                    },\n                    err: null,\n                };\n            }\n            // Argument with options: `{name, format, ...}`\n            case 44 /* `,` */: {\n                this.bump(); // `,`\n                this.bumpSpace();\n                if (this.isEOF()) {\n                    return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n                }\n                return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n            }\n            default:\n                return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n    };\n    /**\n     * Advance the parser until the end of the identifier, if it is currently on\n     * an identifier character. Return an empty string otherwise.\n     */\n    Parser.prototype.parseIdentifierIfPossible = function () {\n        var startingPosition = this.clonePosition();\n        var startOffset = this.offset();\n        var value = matchIdentifierAtIndex(this.message, startOffset);\n        var endOffset = startOffset + value.length;\n        this.bumpTo(endOffset);\n        var endPosition = this.clonePosition();\n        var location = createLocation(startingPosition, endPosition);\n        return { value: value, location: location };\n    };\n    Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {\n        var _a;\n        // Parse this range:\n        // {name, type, style}\n        //        ^---^\n        var typeStartPosition = this.clonePosition();\n        var argType = this.parseIdentifierIfPossible().value;\n        var typeEndPosition = this.clonePosition();\n        switch (argType) {\n            case '':\n                // Expecting a style string number, date, time, plural, selectordinal, or select.\n                return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n            case 'number':\n            case 'date':\n            case 'time': {\n                // Parse this range:\n                // {name, number, style}\n                //              ^-------^\n                this.bumpSpace();\n                var styleAndLocation = null;\n                if (this.bumpIf(',')) {\n                    this.bumpSpace();\n                    var styleStartPosition = this.clonePosition();\n                    var result = this.parseSimpleArgStyleIfPossible();\n                    if (result.err) {\n                        return result;\n                    }\n                    var style = trimEnd(result.val);\n                    if (style.length === 0) {\n                        return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n                    }\n                    var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n                    styleAndLocation = { style: style, styleLocation: styleLocation };\n                }\n                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                if (argCloseResult.err) {\n                    return argCloseResult;\n                }\n                var location_1 = createLocation(openingBracePosition, this.clonePosition());\n                // Extract style or skeleton\n                if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {\n                    // Skeleton starts with `::`.\n                    var skeleton = trimStart(styleAndLocation.style.slice(2));\n                    if (argType === 'number') {\n                        var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n                        if (result.err) {\n                            return result;\n                        }\n                        return {\n                            val: { type: TYPE.number, value: value, location: location_1, style: result.val },\n                            err: null,\n                        };\n                    }\n                    else {\n                        if (skeleton.length === 0) {\n                            return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n                        }\n                        var style = {\n                            type: SKELETON_TYPE.dateTime,\n                            pattern: skeleton,\n                            location: styleAndLocation.styleLocation,\n                            parsedOptions: this.shouldParseSkeletons\n                                ? parseDateTimeSkeleton(skeleton)\n                                : {},\n                        };\n                        var type = argType === 'date' ? TYPE.date : TYPE.time;\n                        return {\n                            val: { type: type, value: value, location: location_1, style: style },\n                            err: null,\n                        };\n                    }\n                }\n                // Regular style or no style.\n                return {\n                    val: {\n                        type: argType === 'number'\n                            ? TYPE.number\n                            : argType === 'date'\n                                ? TYPE.date\n                                : TYPE.time,\n                        value: value,\n                        location: location_1,\n                        style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null,\n                    },\n                    err: null,\n                };\n            }\n            case 'plural':\n            case 'selectordinal':\n            case 'select': {\n                // Parse this range:\n                // {name, plural, options}\n                //              ^---------^\n                var typeEndPosition_1 = this.clonePosition();\n                this.bumpSpace();\n                if (!this.bumpIf(',')) {\n                    return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));\n                }\n                this.bumpSpace();\n                // Parse offset:\n                // {name, plural, offset:1, options}\n                //                ^-----^\n                //\n                // or the first option:\n                //\n                // {name, plural, one {...} other {...}}\n                //                ^--^\n                var identifierAndLocation = this.parseIdentifierIfPossible();\n                var pluralOffset = 0;\n                if (argType !== 'select' && identifierAndLocation.value === 'offset') {\n                    if (!this.bumpIf(':')) {\n                        return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n                    }\n                    this.bumpSpace();\n                    var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n                    if (result.err) {\n                        return result;\n                    }\n                    // Parse another identifier for option parsing\n                    this.bumpSpace();\n                    identifierAndLocation = this.parseIdentifierIfPossible();\n                    pluralOffset = result.val;\n                }\n                var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n                if (optionsResult.err) {\n                    return optionsResult;\n                }\n                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                if (argCloseResult.err) {\n                    return argCloseResult;\n                }\n                var location_2 = createLocation(openingBracePosition, this.clonePosition());\n                if (argType === 'select') {\n                    return {\n                        val: {\n                            type: TYPE.select,\n                            value: value,\n                            options: fromEntries(optionsResult.val),\n                            location: location_2,\n                        },\n                        err: null,\n                    };\n                }\n                else {\n                    return {\n                        val: {\n                            type: TYPE.plural,\n                            value: value,\n                            options: fromEntries(optionsResult.val),\n                            offset: pluralOffset,\n                            pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',\n                            location: location_2,\n                        },\n                        err: null,\n                    };\n                }\n            }\n            default:\n                return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n        }\n    };\n    Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {\n        // Parse: {value, number, ::currency/GBP }\n        //\n        if (this.isEOF() || this.char() !== 125 /* `}` */) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bump(); // `}`\n        return { val: true, err: null };\n    };\n    /**\n     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n     */\n    Parser.prototype.parseSimpleArgStyleIfPossible = function () {\n        var nestedBraces = 0;\n        var startPosition = this.clonePosition();\n        while (!this.isEOF()) {\n            var ch = this.char();\n            switch (ch) {\n                case 39 /* `'` */: {\n                    // Treat apostrophe as quoting but include it in the style part.\n                    // Find the end of the quoted literal text.\n                    this.bump();\n                    var apostrophePosition = this.clonePosition();\n                    if (!this.bumpUntil(\"'\")) {\n                        return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n                    }\n                    this.bump();\n                    break;\n                }\n                case 123 /* `{` */: {\n                    nestedBraces += 1;\n                    this.bump();\n                    break;\n                }\n                case 125 /* `}` */: {\n                    if (nestedBraces > 0) {\n                        nestedBraces -= 1;\n                    }\n                    else {\n                        return {\n                            val: this.message.slice(startPosition.offset, this.offset()),\n                            err: null,\n                        };\n                    }\n                    break;\n                }\n                default:\n                    this.bump();\n                    break;\n            }\n        }\n        return {\n            val: this.message.slice(startPosition.offset, this.offset()),\n            err: null,\n        };\n    };\n    Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {\n        var tokens = [];\n        try {\n            tokens = parseNumberSkeletonFromString(skeleton);\n        }\n        catch (e) {\n            return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);\n        }\n        return {\n            val: {\n                type: SKELETON_TYPE.number,\n                tokens: tokens,\n                location: location,\n                parsedOptions: this.shouldParseSkeletons\n                    ? parseNumberSkeleton(tokens)\n                    : {},\n            },\n            err: null,\n        };\n    };\n    /**\n     * @param nesting_level The current nesting level of messages.\n     *     This can be positive when parsing message fragment in select or plural argument options.\n     * @param parent_arg_type The parent argument's type.\n     * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n     *     the argument. It is a by-product of a previous parsing attempt.\n     * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n     *     between a pair of opening and closing tags. The nested message will not parse beyond\n     *     the closing tag boundary.\n     */\n    Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n        var _a;\n        var hasOtherClause = false;\n        var options = [];\n        var parsedSelectors = new Set();\n        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;\n        // Parse:\n        // one {one apple}\n        // ^--^\n        while (true) {\n            if (selector.length === 0) {\n                var startPosition = this.clonePosition();\n                if (parentArgType !== 'select' && this.bumpIf('=')) {\n                    // Try parse `={number}` selector\n                    var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n                    if (result.err) {\n                        return result;\n                    }\n                    selectorLocation = createLocation(startPosition, this.clonePosition());\n                    selector = this.message.slice(startPosition.offset, this.offset());\n                }\n                else {\n                    break;\n                }\n            }\n            // Duplicate selector clauses\n            if (parsedSelectors.has(selector)) {\n                return this.error(parentArgType === 'select'\n                    ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR\n                    : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n            }\n            if (selector === 'other') {\n                hasOtherClause = true;\n            }\n            // Parse:\n            // one {one apple}\n            //     ^----------^\n            this.bumpSpace();\n            var openingBracePosition = this.clonePosition();\n            if (!this.bumpIf('{')) {\n                return this.error(parentArgType === 'select'\n                    ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\n                    : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n            if (fragmentResult.err) {\n                return fragmentResult;\n            }\n            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n            if (argCloseResult.err) {\n                return argCloseResult;\n            }\n            options.push([\n                selector,\n                {\n                    value: fragmentResult.val,\n                    location: createLocation(openingBracePosition, this.clonePosition()),\n                },\n            ]);\n            // Keep track of the existing selectors\n            parsedSelectors.add(selector);\n            // Prep next selector clause.\n            this.bumpSpace();\n            (_a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location);\n        }\n        if (options.length === 0) {\n            return this.error(parentArgType === 'select'\n                ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR\n                : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        if (this.requiresOtherClause && !hasOtherClause) {\n            return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        return { val: options, err: null };\n    };\n    Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {\n        var sign = 1;\n        var startingPosition = this.clonePosition();\n        if (this.bumpIf('+')) {\n        }\n        else if (this.bumpIf('-')) {\n            sign = -1;\n        }\n        var hasDigits = false;\n        var decimal = 0;\n        while (!this.isEOF()) {\n            var ch = this.char();\n            if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {\n                hasDigits = true;\n                decimal = decimal * 10 + (ch - 48);\n                this.bump();\n            }\n            else {\n                break;\n            }\n        }\n        var location = createLocation(startingPosition, this.clonePosition());\n        if (!hasDigits) {\n            return this.error(expectNumberError, location);\n        }\n        decimal *= sign;\n        if (!isSafeInteger(decimal)) {\n            return this.error(invalidNumberError, location);\n        }\n        return { val: decimal, err: null };\n    };\n    Parser.prototype.offset = function () {\n        return this.position.offset;\n    };\n    Parser.prototype.isEOF = function () {\n        return this.offset() === this.message.length;\n    };\n    Parser.prototype.clonePosition = function () {\n        // This is much faster than `Object.assign` or spread.\n        return {\n            offset: this.position.offset,\n            line: this.position.line,\n            column: this.position.column,\n        };\n    };\n    /**\n     * Return the code point at the current position of the parser.\n     * Throws if the index is out of bound.\n     */\n    Parser.prototype.char = function () {\n        var offset = this.position.offset;\n        if (offset >= this.message.length) {\n            throw Error('out of bound');\n        }\n        var code = codePointAt(this.message, offset);\n        if (code === undefined) {\n            throw Error(\"Offset \".concat(offset, \" is at invalid UTF-16 code unit boundary\"));\n        }\n        return code;\n    };\n    Parser.prototype.error = function (kind, location) {\n        return {\n            val: null,\n            err: {\n                kind: kind,\n                message: this.message,\n                location: location,\n            },\n        };\n    };\n    /** Bump the parser to the next UTF-16 code unit. */\n    Parser.prototype.bump = function () {\n        if (this.isEOF()) {\n            return;\n        }\n        var code = this.char();\n        if (code === 10 /* '\\n' */) {\n            this.position.line += 1;\n            this.position.column = 1;\n            this.position.offset += 1;\n        }\n        else {\n            this.position.column += 1;\n            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n            this.position.offset += code < 0x10000 ? 1 : 2;\n        }\n    };\n    /**\n     * If the substring starting at the current position of the parser has\n     * the given prefix, then bump the parser to the character immediately\n     * following the prefix and return true. Otherwise, don't bump the parser\n     * and return false.\n     */\n    Parser.prototype.bumpIf = function (prefix) {\n        if (startsWith(this.message, prefix, this.offset())) {\n            for (var i = 0; i < prefix.length; i++) {\n                this.bump();\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Bump the parser until the pattern character is found and return `true`.\n     * Otherwise bump to the end of the file and return `false`.\n     */\n    Parser.prototype.bumpUntil = function (pattern) {\n        var currentOffset = this.offset();\n        var index = this.message.indexOf(pattern, currentOffset);\n        if (index >= 0) {\n            this.bumpTo(index);\n            return true;\n        }\n        else {\n            this.bumpTo(this.message.length);\n            return false;\n        }\n    };\n    /**\n     * Bump the parser to the target offset.\n     * If target offset is beyond the end of the input, bump the parser to the end of the input.\n     */\n    Parser.prototype.bumpTo = function (targetOffset) {\n        if (this.offset() > targetOffset) {\n            throw Error(\"targetOffset \".concat(targetOffset, \" must be greater than or equal to the current offset \").concat(this.offset()));\n        }\n        targetOffset = Math.min(targetOffset, this.message.length);\n        while (true) {\n            var offset = this.offset();\n            if (offset === targetOffset) {\n                break;\n            }\n            if (offset > targetOffset) {\n                throw Error(\"targetOffset \".concat(targetOffset, \" is at invalid UTF-16 code unit boundary\"));\n            }\n            this.bump();\n            if (this.isEOF()) {\n                break;\n            }\n        }\n    };\n    /** advance the parser through all whitespace to the next non-whitespace code unit. */\n    Parser.prototype.bumpSpace = function () {\n        while (!this.isEOF() && _isWhiteSpace(this.char())) {\n            this.bump();\n        }\n    };\n    /**\n     * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n     * If the input has been exhausted, then this returns null.\n     */\n    Parser.prototype.peek = function () {\n        if (this.isEOF()) {\n            return null;\n        }\n        var code = this.char();\n        var offset = this.offset();\n        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n        return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n    };\n    return Parser;\n}());\nexport { Parser };\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */\nfunction _isAlpha(codepoint) {\n    return ((codepoint >= 97 && codepoint <= 122) ||\n        (codepoint >= 65 && codepoint <= 90));\n}\nfunction _isAlphaOrSlash(codepoint) {\n    return _isAlpha(codepoint) || codepoint === 47; /* '/' */\n}\n/** See `parseTag` function docs. */\nfunction _isPotentialElementNameChar(c) {\n    return (c === 45 /* '-' */ ||\n        c === 46 /* '.' */ ||\n        (c >= 48 && c <= 57) /* 0..9 */ ||\n        c === 95 /* '_' */ ||\n        (c >= 97 && c <= 122) /** a..z */ ||\n        (c >= 65 && c <= 90) /* A..Z */ ||\n        c == 0xb7 ||\n        (c >= 0xc0 && c <= 0xd6) ||\n        (c >= 0xd8 && c <= 0xf6) ||\n        (c >= 0xf8 && c <= 0x37d) ||\n        (c >= 0x37f && c <= 0x1fff) ||\n        (c >= 0x200c && c <= 0x200d) ||\n        (c >= 0x203f && c <= 0x2040) ||\n        (c >= 0x2070 && c <= 0x218f) ||\n        (c >= 0x2c00 && c <= 0x2fef) ||\n        (c >= 0x3001 && c <= 0xd7ff) ||\n        (c >= 0xf900 && c <= 0xfdcf) ||\n        (c >= 0xfdf0 && c <= 0xfffd) ||\n        (c >= 0x10000 && c <= 0xeffff));\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isWhiteSpace(c) {\n    return ((c >= 0x0009 && c <= 0x000d) ||\n        c === 0x0020 ||\n        c === 0x0085 ||\n        (c >= 0x200e && c <= 0x200f) ||\n        c === 0x2028 ||\n        c === 0x2029);\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isPatternSyntax(c) {\n    return ((c >= 0x0021 && c <= 0x0023) ||\n        c === 0x0024 ||\n        (c >= 0x0025 && c <= 0x0027) ||\n        c === 0x0028 ||\n        c === 0x0029 ||\n        c === 0x002a ||\n        c === 0x002b ||\n        c === 0x002c ||\n        c === 0x002d ||\n        (c >= 0x002e && c <= 0x002f) ||\n        (c >= 0x003a && c <= 0x003b) ||\n        (c >= 0x003c && c <= 0x003e) ||\n        (c >= 0x003f && c <= 0x0040) ||\n        c === 0x005b ||\n        c === 0x005c ||\n        c === 0x005d ||\n        c === 0x005e ||\n        c === 0x0060 ||\n        c === 0x007b ||\n        c === 0x007c ||\n        c === 0x007d ||\n        c === 0x007e ||\n        c === 0x00a1 ||\n        (c >= 0x00a2 && c <= 0x00a5) ||\n        c === 0x00a6 ||\n        c === 0x00a7 ||\n        c === 0x00a9 ||\n        c === 0x00ab ||\n        c === 0x00ac ||\n        c === 0x00ae ||\n        c === 0x00b0 ||\n        c === 0x00b1 ||\n        c === 0x00b6 ||\n        c === 0x00bb ||\n        c === 0x00bf ||\n        c === 0x00d7 ||\n        c === 0x00f7 ||\n        (c >= 0x2010 && c <= 0x2015) ||\n        (c >= 0x2016 && c <= 0x2017) ||\n        c === 0x2018 ||\n        c === 0x2019 ||\n        c === 0x201a ||\n        (c >= 0x201b && c <= 0x201c) ||\n        c === 0x201d ||\n        c === 0x201e ||\n        c === 0x201f ||\n        (c >= 0x2020 && c <= 0x2027) ||\n        (c >= 0x2030 && c <= 0x2038) ||\n        c === 0x2039 ||\n        c === 0x203a ||\n        (c >= 0x203b && c <= 0x203e) ||\n        (c >= 0x2041 && c <= 0x2043) ||\n        c === 0x2044 ||\n        c === 0x2045 ||\n        c === 0x2046 ||\n        (c >= 0x2047 && c <= 0x2051) ||\n        c === 0x2052 ||\n        c === 0x2053 ||\n        (c >= 0x2055 && c <= 0x205e) ||\n        (c >= 0x2190 && c <= 0x2194) ||\n        (c >= 0x2195 && c <= 0x2199) ||\n        (c >= 0x219a && c <= 0x219b) ||\n        (c >= 0x219c && c <= 0x219f) ||\n        c === 0x21a0 ||\n        (c >= 0x21a1 && c <= 0x21a2) ||\n        c === 0x21a3 ||\n        (c >= 0x21a4 && c <= 0x21a5) ||\n        c === 0x21a6 ||\n        (c >= 0x21a7 && c <= 0x21ad) ||\n        c === 0x21ae ||\n        (c >= 0x21af && c <= 0x21cd) ||\n        (c >= 0x21ce && c <= 0x21cf) ||\n        (c >= 0x21d0 && c <= 0x21d1) ||\n        c === 0x21d2 ||\n        c === 0x21d3 ||\n        c === 0x21d4 ||\n        (c >= 0x21d5 && c <= 0x21f3) ||\n        (c >= 0x21f4 && c <= 0x22ff) ||\n        (c >= 0x2300 && c <= 0x2307) ||\n        c === 0x2308 ||\n        c === 0x2309 ||\n        c === 0x230a ||\n        c === 0x230b ||\n        (c >= 0x230c && c <= 0x231f) ||\n        (c >= 0x2320 && c <= 0x2321) ||\n        (c >= 0x2322 && c <= 0x2328) ||\n        c === 0x2329 ||\n        c === 0x232a ||\n        (c >= 0x232b && c <= 0x237b) ||\n        c === 0x237c ||\n        (c >= 0x237d && c <= 0x239a) ||\n        (c >= 0x239b && c <= 0x23b3) ||\n        (c >= 0x23b4 && c <= 0x23db) ||\n        (c >= 0x23dc && c <= 0x23e1) ||\n        (c >= 0x23e2 && c <= 0x2426) ||\n        (c >= 0x2427 && c <= 0x243f) ||\n        (c >= 0x2440 && c <= 0x244a) ||\n        (c >= 0x244b && c <= 0x245f) ||\n        (c >= 0x2500 && c <= 0x25b6) ||\n        c === 0x25b7 ||\n        (c >= 0x25b8 && c <= 0x25c0) ||\n        c === 0x25c1 ||\n        (c >= 0x25c2 && c <= 0x25f7) ||\n        (c >= 0x25f8 && c <= 0x25ff) ||\n        (c >= 0x2600 && c <= 0x266e) ||\n        c === 0x266f ||\n        (c >= 0x2670 && c <= 0x2767) ||\n        c === 0x2768 ||\n        c === 0x2769 ||\n        c === 0x276a ||\n        c === 0x276b ||\n        c === 0x276c ||\n        c === 0x276d ||\n        c === 0x276e ||\n        c === 0x276f ||\n        c === 0x2770 ||\n        c === 0x2771 ||\n        c === 0x2772 ||\n        c === 0x2773 ||\n        c === 0x2774 ||\n        c === 0x2775 ||\n        (c >= 0x2794 && c <= 0x27bf) ||\n        (c >= 0x27c0 && c <= 0x27c4) ||\n        c === 0x27c5 ||\n        c === 0x27c6 ||\n        (c >= 0x27c7 && c <= 0x27e5) ||\n        c === 0x27e6 ||\n        c === 0x27e7 ||\n        c === 0x27e8 ||\n        c === 0x27e9 ||\n        c === 0x27ea ||\n        c === 0x27eb ||\n        c === 0x27ec ||\n        c === 0x27ed ||\n        c === 0x27ee ||\n        c === 0x27ef ||\n        (c >= 0x27f0 && c <= 0x27ff) ||\n        (c >= 0x2800 && c <= 0x28ff) ||\n        (c >= 0x2900 && c <= 0x2982) ||\n        c === 0x2983 ||\n        c === 0x2984 ||\n        c === 0x2985 ||\n        c === 0x2986 ||\n        c === 0x2987 ||\n        c === 0x2988 ||\n        c === 0x2989 ||\n        c === 0x298a ||\n        c === 0x298b ||\n        c === 0x298c ||\n        c === 0x298d ||\n        c === 0x298e ||\n        c === 0x298f ||\n        c === 0x2990 ||\n        c === 0x2991 ||\n        c === 0x2992 ||\n        c === 0x2993 ||\n        c === 0x2994 ||\n        c === 0x2995 ||\n        c === 0x2996 ||\n        c === 0x2997 ||\n        c === 0x2998 ||\n        (c >= 0x2999 && c <= 0x29d7) ||\n        c === 0x29d8 ||\n        c === 0x29d9 ||\n        c === 0x29da ||\n        c === 0x29db ||\n        (c >= 0x29dc && c <= 0x29fb) ||\n        c === 0x29fc ||\n        c === 0x29fd ||\n        (c >= 0x29fe && c <= 0x2aff) ||\n        (c >= 0x2b00 && c <= 0x2b2f) ||\n        (c >= 0x2b30 && c <= 0x2b44) ||\n        (c >= 0x2b45 && c <= 0x2b46) ||\n        (c >= 0x2b47 && c <= 0x2b4c) ||\n        (c >= 0x2b4d && c <= 0x2b73) ||\n        (c >= 0x2b74 && c <= 0x2b75) ||\n        (c >= 0x2b76 && c <= 0x2b95) ||\n        c === 0x2b96 ||\n        (c >= 0x2b97 && c <= 0x2bff) ||\n        (c >= 0x2e00 && c <= 0x2e01) ||\n        c === 0x2e02 ||\n        c === 0x2e03 ||\n        c === 0x2e04 ||\n        c === 0x2e05 ||\n        (c >= 0x2e06 && c <= 0x2e08) ||\n        c === 0x2e09 ||\n        c === 0x2e0a ||\n        c === 0x2e0b ||\n        c === 0x2e0c ||\n        c === 0x2e0d ||\n        (c >= 0x2e0e && c <= 0x2e16) ||\n        c === 0x2e17 ||\n        (c >= 0x2e18 && c <= 0x2e19) ||\n        c === 0x2e1a ||\n        c === 0x2e1b ||\n        c === 0x2e1c ||\n        c === 0x2e1d ||\n        (c >= 0x2e1e && c <= 0x2e1f) ||\n        c === 0x2e20 ||\n        c === 0x2e21 ||\n        c === 0x2e22 ||\n        c === 0x2e23 ||\n        c === 0x2e24 ||\n        c === 0x2e25 ||\n        c === 0x2e26 ||\n        c === 0x2e27 ||\n        c === 0x2e28 ||\n        c === 0x2e29 ||\n        (c >= 0x2e2a && c <= 0x2e2e) ||\n        c === 0x2e2f ||\n        (c >= 0x2e30 && c <= 0x2e39) ||\n        (c >= 0x2e3a && c <= 0x2e3b) ||\n        (c >= 0x2e3c && c <= 0x2e3f) ||\n        c === 0x2e40 ||\n        c === 0x2e41 ||\n        c === 0x2e42 ||\n        (c >= 0x2e43 && c <= 0x2e4f) ||\n        (c >= 0x2e50 && c <= 0x2e51) ||\n        c === 0x2e52 ||\n        (c >= 0x2e53 && c <= 0x2e7f) ||\n        (c >= 0x3001 && c <= 0x3003) ||\n        c === 0x3008 ||\n        c === 0x3009 ||\n        c === 0x300a ||\n        c === 0x300b ||\n        c === 0x300c ||\n        c === 0x300d ||\n        c === 0x300e ||\n        c === 0x300f ||\n        c === 0x3010 ||\n        c === 0x3011 ||\n        (c >= 0x3012 && c <= 0x3013) ||\n        c === 0x3014 ||\n        c === 0x3015 ||\n        c === 0x3016 ||\n        c === 0x3017 ||\n        c === 0x3018 ||\n        c === 0x3019 ||\n        c === 0x301a ||\n        c === 0x301b ||\n        c === 0x301c ||\n        c === 0x301d ||\n        (c >= 0x301e && c <= 0x301f) ||\n        c === 0x3020 ||\n        c === 0x3030 ||\n        c === 0xfd3e ||\n        c === 0xfd3f ||\n        (c >= 0xfe45 && c <= 0xfe46));\n}\n","import { __assign } from \"tslib\";\nimport { ErrorKind } from './error';\nimport { Parser } from './parser';\nimport { isDateElement, isDateTimeSkeleton, isNumberElement, isNumberSkeleton, isPluralElement, isSelectElement, isTagElement, isTimeElement, } from './types';\nfunction pruneLocation(els) {\n    els.forEach(function (el) {\n        delete el.location;\n        if (isSelectElement(el) || isPluralElement(el)) {\n            for (var k in el.options) {\n                delete el.options[k].location;\n                pruneLocation(el.options[k].value);\n            }\n        }\n        else if (isNumberElement(el) && isNumberSkeleton(el.style)) {\n            delete el.style.location;\n        }\n        else if ((isDateElement(el) || isTimeElement(el)) &&\n            isDateTimeSkeleton(el.style)) {\n            delete el.style.location;\n        }\n        else if (isTagElement(el)) {\n            pruneLocation(el.children);\n        }\n    });\n}\nexport function parse(message, opts) {\n    if (opts === void 0) { opts = {}; }\n    opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);\n    var result = new Parser(message, opts).parse();\n    if (result.err) {\n        var error = SyntaxError(ErrorKind[result.err.kind]);\n        // @ts-expect-error Assign to error object\n        error.location = result.err.location;\n        // @ts-expect-error Assign to error object\n        error.originalMessage = result.err.message;\n        throw error;\n    }\n    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n        pruneLocation(result.val);\n    }\n    return result.val;\n}\nexport * from './types';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateENXB = exports.generateENXA = exports.generateXXHA = exports.generateXXAC = exports.generateXXLS = void 0;\nvar tslib_1 = require(\"tslib\");\nvar icu_messageformat_parser_1 = require(\"@formatjs/icu-messageformat-parser\");\nfunction generateXXLS(msg) {\n    var ast = typeof msg === 'string' ? (0, icu_messageformat_parser_1.parse)(msg) : msg;\n    var lastChunk = ast.pop();\n    if (lastChunk && (0, icu_messageformat_parser_1.isLiteralElement)(lastChunk)) {\n        lastChunk.value += 'SSSSSSSSSSSSSSSSSSSSSSSSS';\n        return (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], ast, true), [lastChunk], false);\n    }\n    return (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], ast, true), [{ type: icu_messageformat_parser_1.TYPE.literal, value: 'SSSSSSSSSSSSSSSSSSSSSSSSS' }], false);\n}\nexports.generateXXLS = generateXXLS;\nfunction generateXXAC(msg) {\n    var ast = typeof msg === 'string' ? (0, icu_messageformat_parser_1.parse)(msg) : msg;\n    ast.forEach(function (el) {\n        if ((0, icu_messageformat_parser_1.isLiteralElement)(el)) {\n            el.value = el.value.toUpperCase();\n        }\n        else if ((0, icu_messageformat_parser_1.isPluralElement)(el) || (0, icu_messageformat_parser_1.isSelectElement)(el)) {\n            for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n                var opt = _a[_i];\n                generateXXAC(opt.value);\n            }\n        }\n        else if ((0, icu_messageformat_parser_1.isTagElement)(el)) {\n            generateXXAC(el.children);\n        }\n    });\n    return ast;\n}\nexports.generateXXAC = generateXXAC;\nfunction generateXXHA(msg) {\n    var ast = typeof msg === 'string' ? (0, icu_messageformat_parser_1.parse)(msg) : msg;\n    var firstChunk = ast.shift();\n    if (firstChunk && (0, icu_messageformat_parser_1.isLiteralElement)(firstChunk)) {\n        firstChunk.value = '[javascript]' + firstChunk.value;\n        return (0, tslib_1.__spreadArray)([firstChunk], ast, true);\n    }\n    return (0, tslib_1.__spreadArray)([{ type: icu_messageformat_parser_1.TYPE.literal, value: '[javascript]' }], ast, true);\n}\nexports.generateXXHA = generateXXHA;\nvar ASCII = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar ACCENTED_ASCII = 'âḃćḋèḟĝḫíĵǩĺṁńŏṗɋŕśṭůṿẘẋẏẓḀḂḈḊḔḞḠḢḬĴḴĻḾŊÕṔɊŔṠṮŨṼẄẌŸƵ';\nfunction generateENXA(msg) {\n    var ast = typeof msg === 'string' ? (0, icu_messageformat_parser_1.parse)(msg) : msg;\n    ast.forEach(function (el) {\n        if ((0, icu_messageformat_parser_1.isLiteralElement)(el)) {\n            el.value = el.value\n                .split('')\n                .map(function (c) {\n                var i = ASCII.indexOf(c);\n                if (i < 0) {\n                    return c;\n                }\n                return ACCENTED_ASCII[i];\n            })\n                .join('');\n        }\n        else if ((0, icu_messageformat_parser_1.isPluralElement)(el) || (0, icu_messageformat_parser_1.isSelectElement)(el)) {\n            for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n                var opt = _a[_i];\n                generateENXA(opt.value);\n            }\n        }\n        else if ((0, icu_messageformat_parser_1.isTagElement)(el)) {\n            generateENXA(el.children);\n        }\n    });\n    return ast;\n}\nexports.generateENXA = generateENXA;\nfunction generateENXB(msg) {\n    var ast = typeof msg === 'string' ? (0, icu_messageformat_parser_1.parse)(msg) : msg;\n    ast.forEach(function (el) {\n        if ((0, icu_messageformat_parser_1.isLiteralElement)(el)) {\n            var pseudoString = el.value\n                .split('')\n                .map(function (c, index) {\n                var i = ASCII.indexOf(c);\n                var canPad = (index + 1) % 3 === 0;\n                if (i < 0) {\n                    return c;\n                }\n                return canPad ? ACCENTED_ASCII[i].repeat(3) : ACCENTED_ASCII[i];\n            })\n                .join('');\n            el.value = \"[!! \".concat(pseudoString, \" !!]\");\n        }\n        else if ((0, icu_messageformat_parser_1.isPluralElement)(el) || (0, icu_messageformat_parser_1.isSelectElement)(el)) {\n            for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n                var opt = _a[_i];\n                generateENXB(opt.value);\n            }\n        }\n        else if ((0, icu_messageformat_parser_1.isTagElement)(el)) {\n            generateENXB(el.children);\n        }\n    });\n    return ast;\n}\nexports.generateENXB = generateENXB;\n"],"names":["ErrorKind","TYPE","SKELETON_TYPE","isLiteralElement","el","type","literal","isArgumentElement","argument","isNumberElement","number","isDateElement","date","isTimeElement","time","isSelectElement","select","isPluralElement","plural","isPoundElement","pound","isTagElement","tag","isNumberSkeleton","isDateTimeSkeleton","dateTime","createLiteralElement","value","createNumberElement","style","SPACE_SEPARATOR_REGEX","DATE_TIME_REGEX","parseDateTimeSkeleton","skeleton","result","replace","match","len","length","era","year","RangeError","month","day","weekday","hour12","hourCycle","hour","minute","second","timeZoneName","WHITE_SPACE_REGEX","_a","FRACTION_PRECISION_REGEX","SIGNIFICANT_PRECISION_REGEX","INTEGER_WIDTH_REGEX","CONCISE_INTEGER_WIDTH_REGEX","parseSignificantPrecision","str","roundingPriority","_","g1","g2","minimumSignificantDigits","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseConciseScientificAndEngineeringStem","stem","notation","slice","test","Error","minimumIntegerDigits","parseNotationOptions","opt","signOpts","parseNumberSkeleton","tokens","_i","tokens_1","token","scale","currency","options","useGrouping","maximumFractionDigits","unit","compactDisplay","__assign","reduce","all","currencyDisplay","unitDisplay","parseFloat","g3","g4","g5","minimumFractionDigits","trailingZeroDisplay","conciseScientificAndEngineeringOpts","SPACE_SEPARATOR_START_REGEX","RegExp","concat","source","SPACE_SEPARATOR_END_REGEX","createLocation","start","end","hasNativeStartsWith","String","prototype","startsWith","hasNativeFromCodePoint","fromCodePoint","hasNativeFromEntries","Object","fromEntries","hasNativeCodePointAt","codePointAt","hasTrimStart","trimStart","hasTrimEnd","trimEnd","isSafeInteger","Number","n","isFinite","Math","floor","abs","REGEX_SUPPORTS_U_AND_Y","RE","exec","matchIdentifierAtIndex","s","search","position","codePoints","arguments","code","elements","i","fromCharCode","entries","obj","entries_1","k","v","index","size","first","charCodeAt","flag","IDENTIFIER_PREFIX_RE_1","lastIndex","c","undefined","_isWhiteSpace","_isPatternSyntax","push","apply","Parser","message","this","offset","line","column","ignoreTag","requiresOtherClause","shouldParseSkeletons","parse","parseMessage","nestingLevel","parentArgType","expectingCloseTag","isEOF","char","parseArgument","err","val","peek","error","UNMATCHED_CLOSING_TAG","clonePosition","_isAlpha","parseTag","parseLiteral","bump","location","startPosition","tagName","parseTagName","bumpSpace","bumpIf","childrenResult","children","endTagStartPosition","INVALID_TAG","closingTagNameStartPosition","UNCLOSED_TAG","startOffset","parseQuoteResult","tryParseQuote","parseUnquotedResult","tryParseUnquoted","parseLeftAngleResult","tryParseLeftAngleBracket","codepoint","ch","openingBracePosition","EXPECT_ARGUMENT_CLOSING_BRACE","EMPTY_ARGUMENT","parseIdentifierIfPossible","MALFORMED_ARGUMENT","parseArgumentOptions","startingPosition","endOffset","bumpTo","typeStartPosition","argType","typeEndPosition","EXPECT_ARGUMENT_TYPE","styleAndLocation","styleStartPosition","parseSimpleArgStyleIfPossible","EXPECT_ARGUMENT_STYLE","styleLocation","argCloseResult","tryParseArgumentClose","location_1","parseNumberSkeletonFromString","EXPECT_DATE_TIME_SKELETON","pattern","parsedOptions","typeEndPosition_1","EXPECT_SELECT_ARGUMENT_OPTIONS","identifierAndLocation","pluralOffset","EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE","tryParseDecimalInteger","INVALID_PLURAL_ARGUMENT_OFFSET_VALUE","optionsResult","tryParsePluralOrSelectOptions","location_2","pluralType","INVALID_ARGUMENT_TYPE","nestedBraces","apostrophePosition","bumpUntil","UNCLOSED_QUOTE_IN_ARGUMENT_STYLE","stringTokens_1","split","filter","x","stemAndOptions","options_1","e","INVALID_NUMBER_SKELETON","expectCloseTag","parsedFirstIdentifier","hasOtherClause","parsedSelectors","Set","selector","selectorLocation","EXPECT_PLURAL_ARGUMENT_SELECTOR","INVALID_PLURAL_ARGUMENT_SELECTOR","has","DUPLICATE_SELECT_ARGUMENT_SELECTOR","DUPLICATE_PLURAL_ARGUMENT_SELECTOR","EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT","EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT","fragmentResult","add","EXPECT_SELECT_ARGUMENT_SELECTOR","MISSING_OTHER_CLAUSE","expectNumberError","invalidNumberError","sign","hasDigits","decimal","kind","prefix","currentOffset","indexOf","targetOffset","min","nextCode","pruneLocation","els","forEach","opts","SyntaxError","originalMessage","captureLocation","defineProperty","exports","generateENXB","generateENXA","generateXXHA","generateXXAC","generateXXLS","tslib_1","require","icu_messageformat_parser_1","msg","ast","lastChunk","pop","__spreadArray","toUpperCase","values","firstChunk","shift","ASCII","ACCENTED_ASCII","map","join","pseudoString","repeat"],"sourceRoot":""}